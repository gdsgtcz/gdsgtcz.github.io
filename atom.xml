<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[明天不用上课]]></title>
  
  <link href="/atom.xml" rel="self"/>
  <link href="http://gdsgtcz.github.io/"/>
  <updated>2016-01-07T06:58:23.000Z</updated>
  <id>http://gdsgtcz.github.io/</id>
  
  <author>
    <name><![CDATA[gdsgtcz]]></name>
    <email><![CDATA[gd.g@qq.com]]></email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[iOS开发：获取设备网络状态]]></title>
    <link href="http://gdsgtcz.github.io/2016/01/07/iOS%E5%BC%80%E5%8F%91%EF%BC%9A%E8%8E%B7%E5%8F%96%E8%AE%BE%E5%A4%87%E7%BD%91%E7%BB%9C%E7%8A%B6%E6%80%81/"/>
    <id>http://gdsgtcz.github.io/2016/01/07/iOS开发：获取设备网络状态/</id>
    <published>2016-01-07T06:51:38.000Z</published>
    <updated>2016-01-07T06:58:23.000Z</updated>
    <content type="html"><![CDATA[<p>在开发iOS应用或者游戏时，我们可以通过<strong>Reachability</strong>库进行iOS设备的网络监测。</p>
<p>首先，Reachability官方下载地址在<a href="https://developer.apple.com/library/ios/samplecode/Reachability/Introduction/Intro.html" target="_blank" rel="external">这里</a>。</p>
<h3 id="1-_Reachability_u7B80_u4ECB"><a href="#1-_Reachability_u7B80_u4ECB" class="headerlink" title="1. Reachability简介"></a>1. Reachability简介</h3><p>Reachablity 是一个iOS下检测,iOS设备网络环境用的库。</p>
<ul>
<li>监视设备网络是否可用。</li>
<li>监视当前网络的连接方式。</li>
<li>监测网络连接方式的变更。</li>
</ul>
<p>简单点说，Reachablity可以监测当前设备是未联网状态还是连接2g,3g,4g或wifi状态，并且当网络连接类型改变的时候可以实时监测通知。</p>
<h3 id="2-_Reachability_u4F7F_u7528"><a href="#2-_Reachability_u4F7F_u7528" class="headerlink" title="2. Reachability使用"></a>2. Reachability使用</h3><p>把下载的Reachability.h和Reachability.m文件加到项目中，在入口文件处包含Reachability头文件并加入下列代码：<br>（例如我使用cocos2d-x开发，就在AppController.mm文件中处理）</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 监测网络情况</span></span><br><span class="line">[[NSNotificationCenter defaultCenter] <span class="string">addObserver:</span>self</span><br><span class="line"><span class="label">                                         selector:</span><span class="annotation">@selector</span>(<span class="string">reachabilityChanged:</span>)</span><br><span class="line"><span class="label">                                             name:</span> kReachabilityChangedNotification</span><br><span class="line"><span class="label">                                           object:</span> nil];</span><br><span class="line">Reachability* hostReach = [Reachability <span class="string">reachabilityWithHostName:</span>@<span class="string">"www.baidu.com"</span>];</span><br><span class="line">[hostReach startNotifier];</span><br></pre></td></tr></table></figure>
<p>检测某一特定站点的接续状况，这里以百度为例，reachabilityChanged方法是当网络环境改变时回调的函数，实现类似如下：</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//网络环境改变回调函数</span></span><br><span class="line">- (<span class="keyword">void</span>)reachabilityChanged:(<span class="built_in">NSNotification</span> *)note</span><br><span class="line">&#123;</span><br><span class="line">    Reachability* curReach = [note object];</span><br><span class="line">    <span class="built_in">NSParameterAssert</span>([curReach isKindOfClass: [Reachability class]]);</span><br><span class="line">    NetworkStatus status = [curReach currentReachabilityStatus];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">switch</span> (status)</span><br><span class="line">    &#123;</span><br><span class="line">            </span><br><span class="line">        <span class="keyword">case</span> NotReachable:</span><br><span class="line">            <span class="built_in">NSLog</span>(<span class="string">@"====当前网络状态不可达======="</span>);</span><br><span class="line">            <span class="comment">//其他处理</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">            </span><br><span class="line">        <span class="keyword">case</span> ReachableViaWiFi:</span><br><span class="line">            <span class="built_in">NSLog</span>(<span class="string">@"====当前网络状态为Wifi======="</span>);</span><br><span class="line">            <span class="comment">//其他处理</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">            </span><br><span class="line">        <span class="keyword">case</span> kReachableVia2G:</span><br><span class="line">            <span class="built_in">NSLog</span>(<span class="string">@"====当前网络状态为2G======="</span>);</span><br><span class="line">            <span class="comment">//其他处理</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">            </span><br><span class="line">        <span class="keyword">case</span> kReachableVia3G:</span><br><span class="line">            <span class="built_in">NSLog</span>(<span class="string">@"====当前网络状态为3G======="</span>);</span><br><span class="line">            <span class="comment">//其他处理</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">            </span><br><span class="line">        <span class="keyword">case</span> kReachableVia4G:</span><br><span class="line">            <span class="built_in">NSLog</span>(<span class="string">@"====当前网络状态为4G======="</span>);</span><br><span class="line">            <span class="comment">//其他处理</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">            </span><br><span class="line">        <span class="keyword">case</span> ReachableViaWWAN:</span><br><span class="line">            <span class="built_in">NSLog</span>(<span class="string">@"====当前网络状态为WWAN======="</span>);</span><br><span class="line">            <span class="comment">//其他处理</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="built_in">NSLog</span>(<span class="string">@"你是外星来的吗？"</span>);</span><br><span class="line">            <span class="comment">//其他处理</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>根据status判断当前网络状态变成哪种方式，在“//其他处理”处可加入其他处理代码。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>在开发iOS应用或者游戏时，我们可以通过<strong>Reachability</strong>库进行iOS设备的网络监测。</p>
<p>首先，Reachability官方下载地址在<a href="https://developer.apple.com/library]]>
    </summary>
    
      <category term="iOS Cocos2d-x" scheme="http://gdsgtcz.github.io/tags/iOS-Cocos2d-x/"/>
    
      <category term="iOS开发" scheme="http://gdsgtcz.github.io/categories/iOS%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[C++封装zlib库压缩字符串]]></title>
    <link href="http://gdsgtcz.github.io/2016/01/06/C++%E5%B0%81%E8%A3%85zlib%E5%BA%93%E5%8E%8B%E7%BC%A9%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    <id>http://gdsgtcz.github.io/2016/01/06/C++封装zlib库压缩字符串/</id>
    <published>2016-01-06T01:58:15.000Z</published>
    <updated>2016-01-06T02:00:43.000Z</updated>
    <content type="html"><![CDATA[<p>可以看一下我的<a href="https://github.com/gdsgtcz/Zlib-Lua-C" target="_blank" rel="external"><strong>Github项目</strong></a>,使用封装zlib库的ZLibString类进行压缩C++字符串。</p>
<ul>
<li><p>使用</p>
<p>将ZLibString.h,ZLibString.cpp文件加入项目，使用以下方法进行压缩，解压缩。</p>
  <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 压缩，pcContentBuf:要压缩的内容 pcCompBuf:压缩后的内容 ulCompLen:得到压缩后的长度</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Compress</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>* pcContentBuf, <span class="keyword">char</span>* pcCompBuf, <span class="keyword">unsigned</span> <span class="keyword">long</span>&amp; ulCompLen)</span></span>;  </span><br><span class="line"><span class="comment">// 解压,pcCompBuf:压缩的内容, pcUnCompBuf:解压后的内容  ulCompLen:传入压缩内容的长度</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">UnCompress</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>* pcCompBuf, <span class="keyword">char</span>* pcUnCompBuf, <span class="keyword">unsigned</span> <span class="keyword">long</span> ulCompLen)</span></span>;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p> 具体见源码。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>可以看一下我的<a href="https://github.com/gdsgtcz/Zlib-Lua-C" target="_blank" rel="external"><strong>Github项目</strong></a>,使用封装zlib库的ZLibString类]]>
    </summary>
    
      <category term="C++" scheme="http://gdsgtcz.github.io/tags/C/"/>
    
      <category term="C++" scheme="http://gdsgtcz.github.io/categories/C/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Lua中使用zlib库压缩字符串]]></title>
    <link href="http://gdsgtcz.github.io/2016/01/06/Lua%E4%B8%AD%E4%BD%BF%E7%94%A8zlib%E5%BA%93%E5%8E%8B%E7%BC%A9%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    <id>http://gdsgtcz.github.io/2016/01/06/Lua中使用zlib库压缩字符串/</id>
    <published>2016-01-06T01:52:59.000Z</published>
    <updated>2016-01-06T02:00:54.000Z</updated>
    <content type="html"><![CDATA[<p>可以看一下我的<a href="https://github.com/gdsgtcz/Zlib-Lua-C" target="_blank" rel="external"><strong>Github项目</strong></a>,使用项目中的lua_zlib.h文件压缩lua字符串。</p>
<ul>
<li><p>使用</p>
<p>我使用的开发环境是cocos2d-x + lua开发,以我的项目为例，<br>将lua_zlib.h文件加入项目中，在入口文件中包含该头文件并注册以便在lua中使用，注册如下：</p>
<figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">luaL_requiref_<span class="list">(<span class="keyword">L</span>, <span class="string">"zlib"</span>, luaopen_zlib, <span class="number">1</span>)</span><span class="comment">;</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>  然后lua中就可以使用如下：</p>
  <figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">local zip=<span class="function"><span class="title">require</span><span class="params">(<span class="string">"zlib"</span>)</span></span>     </span><br><span class="line">local v,mv,pv=zip.<span class="function"><span class="title">version</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(v .. <span class="string">"  "</span> .. mv .. <span class="string">"  "</span> .. pv)</span></span></span><br><span class="line">local compress=zip.<span class="function"><span class="title">deflate</span><span class="params">()</span></span></span><br><span class="line">local uncompress=zip.<span class="function"><span class="title">inflate</span><span class="params">()</span></span></span><br><span class="line"></span><br><span class="line">-- 压缩字符串</span><br><span class="line">local deflated, eof, bytes_in,bytes_out =<span class="function"><span class="title">compress</span><span class="params">(<span class="string">"asdasdasdasdasdasdasdasdasd"</span>, <span class="string">'finish'</span>)</span></span></span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(deflated)</span></span></span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(eof)</span></span></span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(bytes_in)</span></span></span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(bytes_out)</span></span></span><br><span class="line"></span><br><span class="line">-- 解压字符串</span><br><span class="line">local uss,ret,getin,getout=<span class="function"><span class="title">uncompress</span><span class="params">(deflated)</span></span>    </span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(uss)</span></span></span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(ret)</span></span></span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(getin)</span></span></span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(getout)</span></span></span><br></pre></td></tr></table></figure>
<p>  ‘finish’为压缩选项，有 “none”, “sync”, “full”, “finish”, NULL，几种类型。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>可以看一下我的<a href="https://github.com/gdsgtcz/Zlib-Lua-C" target="_blank" rel="external"><strong>Github项目</strong></a>,使用项目中的lua_zlib.h文件压缩l]]>
    </summary>
    
      <category term="Lua Cocos2d-x" scheme="http://gdsgtcz.github.io/tags/Lua-Cocos2d-x/"/>
    
      <category term="Lua" scheme="http://gdsgtcz.github.io/categories/Lua/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[C++在mac下判断并新建文件夹]]></title>
    <link href="http://gdsgtcz.github.io/2016/01/04/C++%E5%9C%A8mac%E4%B8%8B%E5%88%A4%E6%96%AD%E5%B9%B6%E6%96%B0%E5%BB%BA%E6%96%87%E4%BB%B6%E5%A4%B9/"/>
    <id>http://gdsgtcz.github.io/2016/01/04/C++在mac下判断并新建文件夹/</id>
    <published>2016-01-04T08:38:23.000Z</published>
    <updated>2016-01-04T08:58:20.000Z</updated>
    <content type="html"><![CDATA[<p><strong><em>首先，需要包含头文件</em></strong></p>
<figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;stdarg.h&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;sys/stat.h&gt;</span></span></span><br></pre></td></tr></table></figure>
<p><strong><em>函数实现</em></strong><br>判断是否存在文件路径，不存在则创建</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">createDir</span><span class="params">(<span class="built_in">std</span>::<span class="built_in">string</span> path)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    FILE *fp = <span class="literal">NULL</span>;</span><br><span class="line">    fp = fopen(path.c_str(), <span class="string">"w"</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (!fp) &#123;</span><br><span class="line">        mkdir(path.c_str(), <span class="number">0775</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        fclose(fp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>其中，path是“/”结尾的文件夹路径，可通过以下方法获取mac下的home路径<br><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">char</span>* homeDir = getenv (<span class="string">"HOME"</span>);</span><br></pre></td></tr></table></figure></p>
]]></content>
    <summary type="html">
    <![CDATA[<p><strong><em>首先，需要包含头文件</em></strong></p>
<figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><]]>
    </summary>
    
      <category term="C++" scheme="http://gdsgtcz.github.io/tags/C/"/>
    
      <category term="C++" scheme="http://gdsgtcz.github.io/categories/C/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[iOS开发：获取设备信息]]></title>
    <link href="http://gdsgtcz.github.io/2015/12/25/iOS%E5%BC%80%E5%8F%91%EF%BC%9A%E8%8E%B7%E5%8F%96%E8%AE%BE%E5%A4%87%E4%BF%A1%E6%81%AF/"/>
    <id>http://gdsgtcz.github.io/2015/12/25/iOS开发：获取设备信息/</id>
    <published>2015-12-25T04:12:26.000Z</published>
    <updated>2015-12-25T04:13:21.000Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>开发iOS平台的应用的时候，可以获取iOS设备的设备信息，包括设备的名称，设备的机型，设备的iOS版本等等。设备信息主要来自 UIDevice 类。</p>
</blockquote>
<p>代码如下：</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">UIDevice</span> *currentDevice = [<span class="built_in">UIDevice</span> currentDevice];</span><br><span class="line"><span class="built_in">NSString</span> *strName = currentDevice<span class="variable">.name</span>;    <span class="comment">//设备名称</span></span><br><span class="line"><span class="built_in">NSString</span> *strModel = currentDevice<span class="variable">.model</span>;    <span class="comment">//设备类别</span></span><br><span class="line"><span class="built_in">NSString</span> *strLocalizedModel = currentDevice<span class="variable">.localizedModel</span>;    <span class="comment">//设备本地化版本</span></span><br><span class="line"><span class="built_in">NSString</span> *strSystemName = currentDevice<span class="variable">.systemName</span>;    <span class="comment">//设备运行的系统</span></span><br><span class="line"><span class="built_in">NSString</span> *strSystemVersion = currentDevice<span class="variable">.systemVersion</span>;    <span class="comment">//当前系统版本</span></span><br><span class="line"><span class="built_in">NSString</span> *strU<span class="built_in">UIDString</span> = currentDevice<span class="variable">.identifierForVendor</span><span class="variable">.UUIDString</span>;    <span class="comment">//系统识别码</span></span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p>开发iOS平台的应用的时候，可以获取iOS设备的设备信息，包括设备的名称，设备的机型，设备的iOS版本等等。设备信息主要来自 UIDevice 类。</p>
</blockquote>
<p>代码如下：</p>
<figure class="hig]]>
    </summary>
    
      <category term="iOS" scheme="http://gdsgtcz.github.io/tags/iOS/"/>
    
      <category term="iOS开发" scheme="http://gdsgtcz.github.io/categories/iOS%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[iOS开发：获取设备IP地址]]></title>
    <link href="http://gdsgtcz.github.io/2015/12/22/iOS%E5%BC%80%E5%8F%91%EF%BC%9A%E8%8E%B7%E5%8F%96%E8%AE%BE%E5%A4%87IP%E5%9C%B0%E5%9D%80/"/>
    <id>http://gdsgtcz.github.io/2015/12/22/iOS开发：获取设备IP地址/</id>
    <published>2015-12-22T12:24:02.000Z</published>
    <updated>2015-12-22T12:26:06.000Z</updated>
    <content type="html"><![CDATA[<p>在c++或者Object-C文件下，添加头文件：</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#import <span class="title">&lt;ifaddrs.h&gt;</span></span></span><br><span class="line"><span class="preprocessor">#import <span class="title">&lt;arpa/inet.h&gt;</span></span></span><br></pre></td></tr></table></figure>
<p>并添加以下代码：</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取ip地址</span></span><br><span class="line">- (<span class="built_in">NSArray</span> *)getIpAddresses&#123;</span><br><span class="line">    <span class="built_in">NSString</span> *address = <span class="string">@"error"</span>;</span><br><span class="line">    <span class="keyword">struct</span> ifaddrs *interfaces = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">struct</span> ifaddrs *temp_addr = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">int</span> success = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// retrieve the current interfaces - returns 0 on success</span></span><br><span class="line">    success = getifaddrs(&amp;interfaces);</span><br><span class="line">    <span class="keyword">if</span> (success == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// Loop through linked list of interfaces</span></span><br><span class="line">        temp_addr = interfaces;</span><br><span class="line">        <span class="keyword">while</span>(temp_addr != <span class="literal">NULL</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(temp_addr-&gt;ifa_addr-&gt;sa_family == AF_INET)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// Check if interface is en0 which is the wifi connection on the iPhone</span></span><br><span class="line">                <span class="keyword">if</span>([[<span class="built_in">NSString</span> stringWithUTF8String:temp_addr-&gt;ifa_name] isEqualToString:<span class="string">@"en0"</span>])</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="comment">// Get NSString from C String</span></span><br><span class="line">                    address = [<span class="built_in">NSString</span> stringWithUTF8String:inet_ntoa(((<span class="keyword">struct</span> sockaddr_in *)temp_addr-&gt;ifa_addr)-&gt;sin_addr)];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            temp_addr = temp_addr-&gt;ifa_next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Free memory</span></span><br><span class="line">    freeifaddrs(interfaces);</span><br><span class="line">    <span class="keyword">return</span> [address UTF8String];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<p>在c++或者Object-C文件下，添加头文件：</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span]]>
    </summary>
    
      <category term="iOS" scheme="http://gdsgtcz.github.io/tags/iOS/"/>
    
      <category term="iOS开发" scheme="http://gdsgtcz.github.io/categories/iOS%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Cocos2d-x在xcode下开发生成静态库添加到项目]]></title>
    <link href="http://gdsgtcz.github.io/2015/12/22/Cocos2d-x%E5%9C%A8xcode%E4%B8%8B%E5%BC%80%E5%8F%91%E7%94%9F%E6%88%90%E9%9D%99%E6%80%81%E5%BA%93%E6%B7%BB%E5%8A%A0%E5%88%B0%E9%A1%B9%E7%9B%AE/"/>
    <id>http://gdsgtcz.github.io/2015/12/22/Cocos2d-x在xcode下开发生成静态库添加到项目/</id>
    <published>2015-12-22T12:18:57.000Z</published>
    <updated>2015-12-22T12:22:06.000Z</updated>
    <content type="html"><![CDATA[<p><strong><em>引言</em></strong></p>
<blockquote>
<p>在xcode下使用cocos2d-x+Lua开发游戏项目的过程中，我们只是把cocos2d-x作为一种工具在使用，而作为cocos2d-x引擎本身，我们基本不会修改底层（或者说是很少修改），那么问题来了，如果我们需要重编译或者archive打包的时候，编译cocos的库将会占据大部分的时间，基于这种情况，如果我们把cocos（或者一些不会修改的依赖项目）编辑成一个静态库的话，势必会节省很多不必要的编译时间。</p>
</blockquote>
<h1 id="u4F7F_u7528cocos2d-x_uFF0BLua_u5F00_u53D1_uFF0C_u4F1A_u7528_u5230_u54EA_u4E9B_u5E95_u5C42_u9879_u76EE_uFF08_u5E93_uFF09"><a href="#u4F7F_u7528cocos2d-x_uFF0BLua_u5F00_u53D1_uFF0C_u4F1A_u7528_u5230_u54EA_u4E9B_u5E95_u5C42_u9879_u76EE_uFF08_u5E93_uFF09" class="headerlink" title="使用cocos2d-x＋Lua开发，会用到哪些底层项目（库）"></a>使用cocos2d-x＋Lua开发，会用到哪些底层项目（库）</h1><p><img src="http://upload-images.jianshu.io/upload_images/1195707-3eb8c5dd5121b2fd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="55EA7405-B045-4DD9-8252-DFBC26653C77.png"></p>
<ul>
<li>cocos2d-x项目<br>cocos源码项目，工程文件是位于 cocos2d-x/build下的cocos2d_libs.xcodeproj文件。</li>
</ul>
<ul>
<li><p>cocos2d_lua_bindings项目<br>cocos2d_lua_bindings作为cocos的绑定项目，只是把cocos的底层功能绑定到lua使用，如果cocos底层不需要修改的话，那么lua-cocos2d-x也是可以打成静态库加到项目中使用的。工程文件是位于cocos2d-x/cocos/scripting/lua-bindings/proj.ios_mac下的cocos2d_lua_bindings.xcodeproj文件。<br>注：如果只是使用cocos2d-x开发而不是使用cocos2d-x+Lua的话，则不会有cocos2d_lua_bindings这个项目。</p>
</li>
<li><p>simulator项目<br>simulator是适用于模拟器的项目，我们完全可以把它对应的iOS和Mac的target打成静态库，以对应不同平台。文件是位于cocos2d-x/tools/simulator/libsimulator/proj.ios_mac下的libsimulator.xcodeproj文件。<br><strong>所以，在使用cocos2d-x开发中，我们可以把cocos2d-x、lua-cocos2dx、simulator项目编译成静态库文件使用</strong></p>
<h1 id="u7F16_u8BD1_u9759_u6001_u5E93"><a href="#u7F16_u8BD1_u9759_u6001_u5E93" class="headerlink" title="编译静态库"></a>编译静态库</h1></li>
<li><p>以cocos2d-x项目为例，Delete项目下的cocos项目，打开 cocos2d-x/build/cocos2d_libs.xcodeproj工程，选择相应的target。<br>如图，在1处选择targets为iOS或者Mac，在2处选择为release或者debug版本。<br><img src="http://upload-images.jianshu.io/upload_images/1195707-cc867714ab5c327a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="4FB6CD1E-E18E-4C9C-82D9-2D6D4FA39F6B.png"></p>
</li>
</ul>
<ul>
<li>编译该工程，编译成功后，在Products显示编译成功的静态库，右击查看生成在本地的静态库。</li>
</ul>
<p><img src="http://upload-images.jianshu.io/upload_images/1195707-0009bfca342ce2c9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="F7182C01-EB6A-4717-8160-E19A6D992FC8.png"></p>
<ul>
<li>如图，是生成的各个版本的静态库。</li>
</ul>
<p><img src="http://upload-images.jianshu.io/upload_images/1195707-b17549eac35ac0c7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="48FBD211-2E2B-4670-A979-01C3EC93C7EB.png"></p>
<ul>
<li>可以通过命令：“lipo -info XXX.a”可以查看静态库的适用环境。</li>
</ul>
<p><img src="http://upload-images.jianshu.io/upload_images/1195707-a7e731a3908c8e9c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="F2C4F370-4A9B-4E00-8CF4-86476444062A.png"></p>
<ul>
<li>将.a静态库文件放在项目路径下（建议新建目录）。</li>
<li>打开xcode，选择targets，选择Build Phases下的Link Binary With Libraries，点击左下角的“＋”后选择“Add Other…”，选择加到项目路径下的.a文件。</li>
</ul>
<p><img src="http://upload-images.jianshu.io/upload_images/1195707-5b48e1dd6545534f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="136A5798-56C1-4F37-9EA9-97DFAE08F4FA.png"></p>
<ul>
<li>如图，添加成功。</li>
</ul>
<p><img src="http://upload-images.jianshu.io/upload_images/1195707-2724cb59e1f9e6cd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="F2F45CD1-97DB-4358-A6CA-0B92E2E560A0.png"></p>
<ul>
<li>cocos2d_lua_binding项目和libsimulator项目编译生成静态库并加入到项目流程类似，不再赘述。<br><strong>注：为了通用起见可以将几个.a库进行合并，这样生成的静态库既可以在模拟器下运行，也可以在真机下运行，合并的命令类似于：lipo -create ./Debug-iphonesimulator/libCocosDenshion\ iOS.a  ./Debug-iphoneos/libCocosDenshion\ iOS.a  -output $OUTPUTDIR_PATH/libCocosDenshion\ iOS.a</strong></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<p><strong><em>引言</em></strong></p>
<blockquote>
<p>在xcode下使用cocos2d-x+Lua开发游戏项目的过程中，我们只是把cocos2d-x作为一种工具在使用，而作为cocos2d-x引擎本身，我们基本不会修改底层（或者说]]>
    </summary>
    
      <category term="Cocos2d-x iOS" scheme="http://gdsgtcz.github.io/tags/Cocos2d-x-iOS/"/>
    
      <category term="Cocos2d-x" scheme="http://gdsgtcz.github.io/categories/Cocos2d-x/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[iOS开发证书与配置文件的使用]]></title>
    <link href="http://gdsgtcz.github.io/2015/12/22/iOS%E5%BC%80%E5%8F%91%E8%AF%81%E4%B9%A6%E4%B8%8E%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>http://gdsgtcz.github.io/2015/12/22/iOS开发证书与配置文件的使用/</id>
    <published>2015-12-22T10:29:43.000Z</published>
    <updated>2015-12-22T11:31:04.000Z</updated>
    <content type="html"><![CDATA[<p><strong><em>前提</em></strong></p>
<p>众所周知，开发iOS应用必须要有iOS证书(Certificates)和配置文件(Provisioning Profiles),那么问题来了：</p>
<blockquote>
<p>1.什么是iOS证书，它是如何与app应用关联的？<br>2.iOS开发证书和生产证书有何区别，如何使用的？<br>3.证书与配置文件(Provisioning Profiles)是什么关系，配置文件在Xcode中如何使用？<br>4.证书以及配置文件如何申请？<br>5.什么是Key Pair(公钥/私钥)？如何与证书关联的？<br>6.签名的作用是什么？</p>
</blockquote>
<p><strong><em>准备工作</em></strong></p>
<p>如果想要进行iOS开发，首先要具备下面一些条件：<br><strong>1.首先，要有苹果开发者账号(Apple Developer Account)</strong></p>
<ul>
<li>只有拥有开发者账号，才能申请开发/发布证书及相应配置文件。</li>
<li>开发者账号分为Individual（个人或公司开发者账号$99）和Company/Organization（企业开发者账号$299）两种类型。</li>
</ul>
<p><strong>2.若要进行真机调试，必须至少拥有一台装有Mac OS X/Xcode的Mac开发机（iMac or MacBook）</strong></p>
<h1 id="u767B_u9646iOS_Dev_Center"><a href="#u767B_u9646iOS_Dev_Center" class="headerlink" title="登陆iOS Dev Center"></a>登陆iOS Dev Center</h1><p>如果已经拥有苹果开发者账号，直接登录<a href="https://developer.apple.com/account/ios" target="_blank" rel="external"><strong>苹果开发者中心</strong></a>申请开发证书。</p>
<ul>
<li>登录界面<br><img src="http://upload-images.jianshu.io/upload_images/1195707-eba14215480b44fa.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="F323D07E-B16C-43D6-AF31-7B681C9EFCA7.png"></li>
<li>选择“Certificates, Identifiers &amp; Profiles”项进入后显示下面界面，iOS Apps一栏中任意选择一项</li>
</ul>
<p><img src="http://upload-images.jianshu.io/upload_images/1195707-6d97e674ee08b1f5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="EB52CB59-2C2C-4DB8-8F4E-F9F3F1BB28FB.png"></p>
<ul>
<li>进入到如图界面</li>
</ul>
<p><img src="http://upload-images.jianshu.io/upload_images/1195707-925259aa6b3fc5e6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="5F9C1BE5-46DB-4023-AD0E-1F717AEB80AE.png"><br><strong>下面就这四项，分别介绍</strong></p>
<h1 id="Certificates_28_u8BC1_u4E66_29_uFF0CIdentifiers_28_u6807_u8BC6_u7B26_29_uFF0CDevices_28_u8BBE_u5907_29_uFF0CProvisioning_Profiles_28_u4F9B_u5E94_u914D_u7F6E_u6587_u4EF6_29"><a href="#Certificates_28_u8BC1_u4E66_29_uFF0CIdentifiers_28_u6807_u8BC6_u7B26_29_uFF0CDevices_28_u8BBE_u5907_29_uFF0CProvisioning_Profiles_28_u4F9B_u5E94_u914D_u7F6E_u6587_u4EF6_29" class="headerlink" title="Certificates(证书)，Identifiers(标识符)，Devices(设备)，Provisioning Profiles(供应配置文件)"></a>Certificates(证书)，Identifiers(标识符)，Devices(设备)，Provisioning Profiles(供应配置文件)</h1><p>为了方便理解，我们把顺序打乱，分别介绍这四项。</p>
<h2 id="Identifiers"><a href="#Identifiers" class="headerlink" title="Identifiers"></a>Identifiers</h2><p>Identifiers即标识符，相当于身份证，用于创建以下三个ID：<br>App IDs<br>Pass Type IDs<br>Website Push IDs</p>
<h3 id="u5173_u4E8EApp_IDs"><a href="#u5173_u4E8EApp_IDs" class="headerlink" title="关于App IDs"></a>关于App IDs</h3><p>其中，App ID是应用的唯一标识符：</p>
<ul>
<li>App ID和Xcode中的Bundle Identifier是一致（Explicit）的或匹配（Wildcard）的。</li>
</ul>
<p><img src="http://upload-images.jianshu.io/upload_images/1195707-6f6159fc2c454a72.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="FEDE676C-1DFC-4958-B52E-3B2DF73A35B3.png"></p>
<ul>
<li>App ID字符串通常以反域名（reverse-domain-name）格式的Company Identifier（Company ID）作为前缀（Prefix/Seed），一般不超过255个ASCII字符。</li>
<li>用户可在Developer MemberCenter网站上注册（Register）或删除（Delete）已注册的App IDs。</li>
</ul>
<h3 id="u521B_u5EFAApp_ID"><a href="#u521B_u5EFAApp_ID" class="headerlink" title="创建App ID"></a>创建App ID</h3><ul>
<li>在“ Identifiers”一栏下选择“App IDs”，可查看所有已申请的App IDs,点击右上“＋”</li>
</ul>
<p><img src="http://upload-images.jianshu.io/upload_images/1195707-5bb71310a5d5a46a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="1EF8FB56-E265-4B97-A8BE-327841B86814.png"></p>
<ul>
<li>进入Register iOS App ID界面，在“App ID Description”栏下的“Name”项中输入名称<br><img src="http://upload-images.jianshu.io/upload_images/1195707-13003bf591610898.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="72E71207-FB31-4BC6-8E03-7EDADE9A82EC.png"></li>
<li>在“Explicit App ID”栏下的“Bundle ID”项中输入App ID（反域名格式，如：com.company.test）<ul>
<li>这里“Bundle ID”对应Xcode中的“Bundle identifier”</li>
<li>Explicit App ID：唯一的App ID，用于唯一标识一个应用程序。例如“com.apple.garageband”这个App ID，用于标识Bundle Identifier为“com.apple.garageband”的App。</li>
<li>Wildcard App ID：含有通配符的App ID，用于标识一组应用程序。例如“<em>”（实际上是Application Identifier Prefix）表示所有应用程序；而“com.apple.</em>”可以表示Bundle Identifier以“com.apple.”开头（苹果公司）的所有应用程序。<br><img src="http://upload-images.jianshu.io/upload_images/1195707-1d13f126fdc86b53.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="378CCEC6-8B91-4CD8-AD2D-027A49B8AA02.png"></li>
</ul>
</li>
</ul>
<ul>
<li>在“App Services”栏下选择应用要使用到的服务（如要使用推送功能，勾选“Push Notifications”）</li>
</ul>
<p><img src="http://upload-images.jianshu.io/upload_images/1195707-aebe2e2e8359744c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="423D58C6-2535-4726-98C6-500658BD1141.png"></p>
<ul>
<li>点击continue-&gt;点击submit-&gt;点击done，申请App IDs完成。点击All IDs可查看申请的ID，点击该ID</li>
</ul>
<p><img src="http://upload-images.jianshu.io/upload_images/1195707-2cec6e17547de848.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="453733A7-ABE7-4696-95EE-45168BD75172.png"></p>
<ul>
<li>点击“Edit”可对该App ID进行编辑</li>
</ul>
<h2 id="Certificates"><a href="#Certificates" class="headerlink" title="Certificates"></a>Certificates</h2><h3 id="u63CF_u8FF0"><a href="#u63CF_u8FF0" class="headerlink" title="描述"></a>描述</h3><p>iOS证书是用来证明iOS App内容（executable code）的合法性和完整性的数字证书。对于想安装到真机或发布到AppStore的应用程序（App），只有经过签名验证（Signature Validated）才能确保来源可信，并且保证App内容是完整、未经篡改的。</p>
<ul>
<li>数字证书是一个经证书授权中心数字签名的包含公开密钥拥有者信息以及公开密钥的文件。具有时效性，只在特定的时间段内有效。</li>
<li>iOS证书分两种：<strong>开发证书（Development）</strong>和<strong>生产证书（Production）</strong>。</li>
</ul>
<blockquote>
<ol>
<li>开发证书用于开发和调试应用程序，可用于联机调试。</li>
<li>生产证书用来发布应用程序。</li>
</ol>
</blockquote>
<h3 id="u751F_u6210_u8BC1_u4E66_u8BF7_u6C42_u6587_u4EF6_uFF08CSR_uFF09"><a href="#u751F_u6210_u8BC1_u4E66_u8BF7_u6C42_u6587_u4EF6_uFF08CSR_uFF09" class="headerlink" title="生成证书请求文件（CSR）"></a>生成证书请求文件（CSR）</h3><p>可以通过Keychain（钥匙串）证书助理从证书颁发机构请求证书。在iOS Dev Center中添加证书（Certificates）时，需要上传改CSR文件。</p>
<ul>
<li>打开Keychain（钥匙串），点击菜单栏“钥匙串访问”-&gt;“证书助理”-&gt;“从证书颁发机构请求证书”</li>
</ul>
<p><img src="http://upload-images.jianshu.io/upload_images/1195707-e628fd81b6416ea4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="64A49729-3C03-4F8F-9910-3E9688235B86.png"></p>
<ul>
<li>填写开发账号邮件和常用名称，勾选“存储到磁盘”。</li>
</ul>
<p><img src="http://upload-images.jianshu.io/upload_images/1195707-f18d18fa90c58493.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="096ED51F-A832-4DA5-BBB0-FEBA17BE4764.png"></p>
<ul>
<li>继续并选择存储位置后，Keychain将生成一个包含开发者身份信息的CSR（Certificate Signing Request）文件。同时，Keychain Access-&gt;Keys（密钥）中增加一对Public/Private Key Pair。</li>
</ul>
<p><img src="http://upload-images.jianshu.io/upload_images/1195707-835d4ebec2c54782.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="DAB324D4-D886-4097-A54D-1E37038A87A1.png"></p>
<blockquote>
<ol>
<li>私钥（private key）始终保存在Mac OS的Keychain Access中，用于签名（CodeSign）对外发布的App。</li>
<li>公钥（public key）一般随证书散布出去，对App签名进行校验认证。</li>
</ol>
</blockquote>
<h3 id="u7533_u8BF7_u8BC1_u4E66"><a href="#u7533_u8BF7_u8BC1_u4E66" class="headerlink" title="申请证书"></a>申请证书</h3><ul>
<li>进入iOS Dev Center，“Certificate”-&gt;“All”,点击右上角“＋”（也可直接点击“Certificate”下的“Development”或“Production”，直接选择申请开发证书或生产证书），进入如下界面：</li>
</ul>
<p><img src="http://upload-images.jianshu.io/upload_images/1195707-a7aa7b9c62ca8c93.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="F5FABF55-157A-47BB-B3A3-3A0125ABAFDC.png"></p>
<ul>
<li>选择开发证书或者生产证书，这里以生产证书为例，继续</li>
</ul>
<p><img src="http://upload-images.jianshu.io/upload_images/1195707-50c0a70b05c1925c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="DB782EBE-01C6-48A1-A83E-A6B6CAC5D349.png"></p>
<ul>
<li>选择App ID，即我们在“ Identifiers”中创建的App ID，继续</li>
</ul>
<p><img src="http://upload-images.jianshu.io/upload_images/1195707-7d92ab346179654d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="62F40B5F-4FA9-49C3-B707-46EADD3EC28A.png"></p>
<ul>
<li>这里介绍如何生产证书请求文件，即我们在“2.2.2. 生成证书请求文件（CSR）”中生成的.certSigningRequest文件，这里继续</li>
</ul>
<p><img src="http://upload-images.jianshu.io/upload_images/1195707-9d1e211a9d0f1eb2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="1A7B633E-B61B-4E63-8EEB-B0D15D0B053E.png"></p>
<ul>
<li>这里需要添加生成的证书请求文件（CSR），“Choose File”选择生成的.certSigningRequest文件，点击“Generate”，如图申请开发证书完成，申请生产证书流程类似，这里不再赘述。</li>
</ul>
<p><img src="http://upload-images.jianshu.io/upload_images/1195707-9d2930732290b135.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="9D2FC3A0-7FC7-43A9-8C3D-B60F108528ED.png"></p>
<ul>
<li>我们可以点击“Download”下载该开发证书，或者在“Certificates”-&gt;“All”中查看该证书，并进行下载或删除，如图：</li>
</ul>
<p><img src="http://upload-images.jianshu.io/upload_images/1195707-2044905ac0d4042d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="A9690706-6620-4A3D-9B9A-D727EFFC9179.png"></p>
<ul>
<li>下载证书，双击导入Keychain Access，可在Keychain Access-&gt;“证书”中查看</li>
</ul>
<p><img src="http://upload-images.jianshu.io/upload_images/1195707-3e1f5b32f5d8d6ef.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="屏幕快照 2015-12-06 下午5.40.06.png"></p>
<ul>
<li>展开安装的证书（ios_development.cer）前面的箭头，可以看到其对应的私钥。在KeychainAccess-&gt;“密钥”中展开创建CSR时生成的Key Pair中的私钥前面的箭头，可以查看到包含其对应公钥的证书.</li>
</ul>
<h3 id="u5BFC_u51FA_u8BC1_u4E66"><a href="#u5BFC_u51FA_u8BC1_u4E66" class="headerlink" title="导出证书"></a>导出证书</h3><ul>
<li>打开Keychain Access，选择安装成功的证书，右键选择“导出”</li>
</ul>
<p><img src="http://upload-images.jianshu.io/upload_images/1195707-82a67a6aa7b9cdca.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="1EF53825-B4C4-43B6-A0D8-536FE32AEB81.png"></p>
<ul>
<li>输入名字，默认格式为.p12类型，选择“Save”</li>
</ul>
<p><img src="http://upload-images.jianshu.io/upload_images/1195707-e4db5bbd76f6b1a7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="72BA1D21-C005-4A7B-81B6-3B8ADC62872D.png"></p>
<ul>
<li>设置密码，点击“OK”</li>
</ul>
<p><img src="http://upload-images.jianshu.io/upload_images/1195707-f2b55ff478277372.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="47AF6037-0C4F-4960-9AD8-75C5EE34CA6F.png"></p>
<h2 id="Devices"><a href="#Devices" class="headerlink" title="Devices"></a>Devices</h2><blockquote>
<ol>
<li>Device是指运行iOS系统用于开发调试App的设备（即苹果设备）。每台Apple设备使用UDID来唯一标识。</li>
<li>设备的UDID可通过iTunes-&gt;Summary或者Xcode-&gt;Window-&gt;Devices获取。</li>
<li>开发描述文件（Provisioning Profiles）必须绑定设备，所以在申请开发描述文件之前，必须要添加调试的设备（已添加可跳过）。</li>
</ol>
</blockquote>
<h3 id="u6DFB_u52A0_u8C03_u8BD5_u8BBE_u5907"><a href="#u6DFB_u52A0_u8C03_u8BD5_u8BBE_u5907" class="headerlink" title="添加调试设备"></a>添加调试设备</h3><ul>
<li>进入iOS Dev Center，“Devices”下选择“All”,可查看所有已添加的设备，点击右上角“＋”添加新的调试设备</li>
</ul>
<p><img src="http://upload-images.jianshu.io/upload_images/1195707-802cf5bee44c638d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="9A9CA0B2-F320-4F9F-B51A-B0C250FECC63.png"></p>
<ul>
<li>输入“Name”和UDID（可在xcode或者iTunes中查看）后，继续</li>
</ul>
<p><img src="http://upload-images.jianshu.io/upload_images/1195707-97d86f7d186c05f9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="ADF3D2DB-09B6-42D2-899B-D92D0E6163B5.png"></p>
<ul>
<li>确认信息后，点击注册，完成添加。</li>
</ul>
<h2 id="Provisioning_Profiles"><a href="#Provisioning_Profiles" class="headerlink" title="Provisioning Profiles"></a>Provisioning Profiles</h2><h3 id="u6982_u5FF5"><a href="#u6982_u5FF5" class="headerlink" title="概念"></a>概念</h3><p>Provisioning Profile文件包含了上述所有内容：<strong>证书</strong>，<strong>App ID</strong>，<strong>设备</strong>，后缀名为.mobileprovision。</p>
<blockquote>
<ol>
<li>一个Provisioning Profile对应一个Explicit App ID或Wildcard App ID。</li>
<li>Provisioning Profile决定Xcode用哪个证书（公钥）/私钥组合（Key Pair/Signing Identity）来签名应用程序（Signing Product）,将在应用程序打包时嵌入到.ipa包里。</li>
<li>Provisioning Profile把这些信息全部打包在一起，方便我们在调试和发布程序打包时使用。这样，只要在不同的情况下选择不同的Provisioning Profile文件就可以了。</li>
<li>Provisioning Profile也分为Development和Distribution两类，有效期同Certificate一样。Development版本的ProvisioningProfile用于开发调试，Distribution版本的ProvisioningProfile主要用于提交App Store审核，其不指定开发测试的Devices。</li>
<li>xcode开发时，需在XcodeTarget-&gt;Build Settings-&gt;Code Signing-&gt;Provisioning Profile下配置对应的描述文件（Provisioning Profiles），然后在Code Signing Identity下拉可选择Identities from Profile “…”（即Provisioning Profile中包含的Certificates）。</li>
<li>在XcodeTarget-&gt;Build Settings-&gt;Code Signing-&gt;Provisioning Profile可选择“Automatic”，xcode会根据该Target的“Bundle identifier”选择默认的配置文件及证书。</li>
</ol>
</blockquote>
<p><img src="http://upload-images.jianshu.io/upload_images/1195707-8f31e4bfd5eb2a88.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="3DAD606D-8BDC-4A7E-8644-5A7CF27DF3B4.png"></p>
<h3 id="u521B_u5EFA_u914D_u7F6E_u6587_u4EF6"><a href="#u521B_u5EFA_u914D_u7F6E_u6587_u4EF6" class="headerlink" title="创建配置文件"></a>创建配置文件</h3><ul>
<li>打开iOS Dev Center，“Provisioning Profiles”-&gt;“All”,点击右上角“＋”（也可直接点击“Development”或“Production”）</li>
</ul>
<p><img src="http://upload-images.jianshu.io/upload_images/1195707-2a813179f8208773.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="AC661BDE-DE94-487E-9A71-4C436224CB5D.png"></p>
<ul>
<li>选择开发或发布证书配置文件，这里以开发为例，点击iOS App Development，继续</li>
</ul>
<p><img src="http://upload-images.jianshu.io/upload_images/1195707-ad44e5465b913cdd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="0AB45E72-821D-4F5C-84F8-CA19E97CC565.png"></p>
<ul>
<li>选择对应的App ID，继续</li>
</ul>
<p><img src="http://upload-images.jianshu.io/upload_images/1195707-c79c2d260db2d681.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="F0C2D519-CA90-4286-A0AB-3A42DB4EADA0.png"></p>
<ul>
<li>选择要关联的证书，可多选，继续</li>
</ul>
<p><img src="http://upload-images.jianshu.io/upload_images/1195707-5206a01d9e240e4d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="50725524-699D-400B-B1C0-3C5024774F95.png"></p>
<ul>
<li>选择用于调试安装的设备(最多100台设备)，<strong>如果是生产证书配置文件，则不会出现该页面（生产证书用于发布，不能进行开发调试）</strong>，继续看到以下界面</li>
</ul>
<p><img src="http://upload-images.jianshu.io/upload_images/1195707-df8253c97b22d162.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="3FD54433-014F-4861-803F-994FFACCC910.png"></p>
<ul>
<li>输入文件名后，点击“Generate”，配置文件创建成功</li>
</ul>
<p><img src="http://upload-images.jianshu.io/upload_images/1195707-dbe354eee3519cea.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="56C9B53B-666E-4173-8083-D1857EB58CD4.png"></p>
<ul>
<li>可点击“Download”进行下载，或者在“Provisioning Profiles”-&gt;“All”查看所有配置文件，并进行下载或删除等操作。</li>
</ul>
<p><img src="http://upload-images.jianshu.io/upload_images/1195707-d38e19f0b14ba6f2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="6F158A64-B819-476F-86EC-A4BA6EF1E3D2.png"></p>
<ul>
<li>如图下载到本地的Provisioning Profile，双击自动安装到xcode中，在XcodeTarget-&gt;Build Settings-&gt;Code Signing-&gt;Provisioning Profile中可看到此项。</li>
</ul>
<p><img src="http://upload-images.jianshu.io/upload_images/1195707-aa4e3036ae1f439a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="F5A42FB8-44EB-4A5C-B53C-3F3499CF883D.png"></p>
<ul>
<li>如图，选择此项配置文件，“Code Signing Identity”中会默认显示所关联的证书文件（即创建该配置文件时选择关联的证书，可有多个）</li>
</ul>
<p><img src="http://upload-images.jianshu.io/upload_images/1195707-ee12b16ca2f1b477.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="3E6BFDF4-28E2-49DF-A31E-0FF507A1604F.png"></p>
<ul>
<li>生产证书配置文件与之类似，不再赘述。</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<p><strong><em>前提</em></strong></p>
<p>众所周知，开发iOS应用必须要有iOS证书(Certificates)和配置文件(Provisioning Profiles),那么问题来了：</p>
<blockquote>
<p>1.什么是iOS证]]>
    </summary>
    
      <category term="iOS" scheme="http://gdsgtcz.github.io/tags/iOS/"/>
    
      <category term="iOS开发" scheme="http://gdsgtcz.github.io/categories/iOS%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[浅谈iOS打包方式及流程]]></title>
    <link href="http://gdsgtcz.github.io/2015/12/22/%E6%B5%85%E8%B0%88iOS%E6%89%93%E5%8C%85%E6%96%B9%E5%BC%8F%E5%8F%8A%E6%B5%81%E7%A8%8B/"/>
    <id>http://gdsgtcz.github.io/2015/12/22/浅谈iOS打包方式及流程/</id>
    <published>2015-12-22T09:56:38.000Z</published>
    <updated>2015-12-22T10:19:27.000Z</updated>
    <content type="html"><![CDATA[<p>本文简单介绍下将iOS项目中生成的.app文件生成可以直接安装的.ipa文件的几种方式。</p>
<h1 id="Apple_u63A8_u8350_u65B9_u5F0F_uFF1AXcode_u7684Archive_u529F_u80FD"><a href="#Apple_u63A8_u8350_u65B9_u5F0F_uFF1AXcode_u7684Archive_u529F_u80FD" class="headerlink" title="Apple推荐方式：Xcode的Archive功能"></a>Apple推荐方式：Xcode的Archive功能</h1><ul>
<li>首先，拔掉所有连接的设备。</li>
<li>然后，Xcode菜单栏-&gt;Product-&gt;Archive，此时项目会重新编译，耐心等待,编译完成会出现以下界面。</li>
</ul>
<p><img src="http://upload-images.jianshu.io/upload_images/1195707-9253e5257628581f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="2D2621EA-72B0-499C-94C0-8F54E7A5D091.png"></p>
<ul>
<li>如图点击“Export”进行导出，弹出以下界面。</li>
</ul>
<p><img src="http://upload-images.jianshu.io/upload_images/1195707-eadd545c651f985a.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="296783a3ae02742f8c8b91a029f7c378.jpg"></p>
<ul>
<li><p>选择导出类型，一般选后两个。</p>
<ul>
<li>Save for iOS App Store Deployment<br>保存到本地 准备上传App Store 或者在越狱的iOS设备上使用</li>
<li>Save for Ad Hoc Deployment<br>保存到本地 准备在账号添加的可使用设备上使用（具体为在开发者账户下添加可用设备的uidi）</li>
<li><p>Save fro Enterprise Deployment<br>这种主要针对企业级账户下 准备本地服务器分发的app</p>
<ul>
<li>选择这种方式时，需要提供发布证书，如图，选择相应证书</li>
</ul>
<p><img src="http://upload-images.jianshu.io/upload_images/1195707-e2026b01b9e41e27.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="CA37F30E-41BE-4A51-8E03-86C8BF4B89EA.png"></p>
<ul>
<li>导出到相应界面</li>
</ul>
</li>
</ul>
<p><img src="http://upload-images.jianshu.io/upload_images/1195707-9b2adf4318d51473.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="65524A09-0E45-483B-AB80-AA1B0E3C927A.png"></p>
</li>
</ul>
<h1 id="u901A_u8FC7iTunes"><a href="#u901A_u8FC7iTunes" class="headerlink" title="通过iTunes"></a>通过iTunes</h1><p>这种方式十分简单，通过把编译后的.app文件拖入iTunes，生成.ipa文件。</p>
<ul>
<li>拔掉所有联机的设备，选择target-&gt;”iOS Device” 方式进行编译。</li>
<li>编译成功，搜索appName.app所在位置(appName为你的应用名称)。</li>
<li>打开iTunes，选择”应用程序”,将生成的.app文件拖入，如果已经存在该应用，先删除。</li>
<li>拖出该应用，即生成.ipa文件</li>
</ul>
<h1 id="u76F4_u63A5_u538B_u7F29_u6539_u540E_u7F00_u540D"><a href="#u76F4_u63A5_u538B_u7F29_u6539_u540E_u7F00_u540D" class="headerlink" title="直接压缩改后缀名"></a>直接压缩改后缀名</h1><p>简单暴力，可以手动压缩改后缀名，也可通过脚本实现。下面分别介绍：<br><strong>1.手动压缩后改后缀名</strong></p>
<ul>
<li>拔掉设备，Xcode编译生成.app文件</li>
<li>新建“Payload”文件夹，注意名字要一字不差</li>
<li>将.app包放到Payload目录下，注意app的名字不做任何更改</li>
<li>Payload文件夹压缩成.zip包，并修改后缀名为.ipa</li>
</ul>
<p><strong>2.使用脚本自动生成</strong></p>
<ul>
<li>创建“distribute”文件夹</li>
<li>将Xcode编译生成的.app文件拷贝到该目录下</li>
<li><p>该目录下创建“distribute.sh”脚本文件，内容如下(appName为你.app名字)：</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">rm -rf APP</span><br><span class="line">mkdir APP</span><br><span class="line">mkdir APP/Payload</span><br><span class="line">cp -r appName.app APP/Payload/appName.app</span><br><span class="line"><span class="built_in">cd</span> APP</span><br><span class="line">zip -r appName.ipa Payload</span><br><span class="line"><span class="built_in">exit</span> <span class="number">0</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>打来Terminal，cd到distribute文件夹下，执行distribute.sh脚本，如果权限不够，则执行“chmod 777 distribute.sh”添加权限。</p>
</li>
<li>若干秒后执行完毕，生成“APP”文件夹，APP目录下的.ipa就是我们要的包。如图：</li>
</ul>
<p><img src="http://upload-images.jianshu.io/upload_images/1195707-93418cd8503ea905.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="FEE7AE77-0B62-49B3-9157-CBFA84E8A341.png"></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>本文简单介绍下将iOS项目中生成的.app文件生成可以直接安装的.ipa文件的几种方式。</p>
<h1 id="Apple_u63A8_u8350_u65B9_u5F0F_uFF1AXcode_u7684Archive_u529F_u80FD"><a href="#App]]>
    </summary>
    
      <category term="iOS" scheme="http://gdsgtcz.github.io/tags/iOS/"/>
    
      <category term="iOS开发" scheme="http://gdsgtcz.github.io/categories/iOS%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
</feed>
